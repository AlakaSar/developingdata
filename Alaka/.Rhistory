cnt0<-subset(pm0,(state.code = 36 & county.site %in% both))
cnt0<-subset(pm0,state.code = 36 & county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both
)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub<-subset(cnt0=63 & Site.Id=2008)
pm0sub<-subset(cnt0=63 & Site.ID=2008)
pm0sub<-subset(cnt0)
pm0sub<-subset(cnt0, County.Code=63 & Site.ID=2008)
pm0sub<-subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub<-subset(cnt1, County.Code==63 & Site.ID==2008)
swirl()
x0sub<-pm0sub$Sample.Value
x1sub<-pm1sub$Sample.Value
date0<-as.Date(as.character(pm0sub$Date, "%Y%m%d"))
date0<-as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates0<-as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1<-as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), mar(c(4,4,2,1)))
par(mfrow=c(1,2), mar(c(4,4,2,1))
)
par(mfrow=c(1,2), mar=(c(4,4,2,1))
)
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(dates0, x0sub, pch=20)
abline(h=median(pm25),lwd=2)
abline(h=median(x0sub, na.rm=TRUE),lwd=2)
plot(dates1, x1sub, pch=20)
plot(dates1, x1sub, pch=20)
abline(h=median(x1sub, na.rm=TRUE),lwd=2)
rng<-range(x0sub,x1sub,na.rm=TRUE)
rng
mn0<-with(pm0,tapply(Sample.Value, State.Code, mean(Sample.Value), na.rm= TRUE))
mn0<-with(pm0,tapply(Sample.Value, State.Code, mean, na.rm= TRUE))
str(mn0)
mn1<-with(pm1,tapply(Sample.Value, State.Code, mean, na.rm= TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0<data.frame(names(mn0),mean=mn0)
d0<-data.frame(names(mn0),mean=mn0)
d0<-data.frame(state=names(mn0),mean=mn0)
d1<-data.frame(state=names(mn1),mean=mn1)
mrg<-merge(d0,d1,set="state")
mrg<-merge(d0,d1,by="state")
dim(mrg)
head(mrg)
withmrg,plot(rep(1.52),mrg[,2],xlim=c(,5,2)))
with(mrg,plot(rep(1.52),mrg[,2],xlim=c(,5,2)))
)
with(mrg,plot(rep(1.52),mrg[,2],xlim= c(.5,2.5)
)
)
with(mrg,plot(rep(1.52),mrg[,2],xlim= c(.5,2.5)))
with
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(x,y,)
segments(x,y,x1,y1
)
segments(rep(1,52), mrg[,2],rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
swirl(0)
swirl()
qunif()
qunif(75)
#Title: "StormdataAnalysis"
knitr::opts_chunk$set(echo = TRUE,font = 10)
#author: "Alaka Sarangdhar"
#date: "April 4, 2016"
#output: html_document
#Title: "StormdataAnalysis"
knitr::opts_chunk$set(echo = TRUE,font = 10)
#author: "Alaka Sarangdhar"
#date: "April 4, 2016"
#output: html_document
swirl()
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("variance", dev = FALSE, mirror = "github")
install_from_swirl("Practical R exercises in swirl", dev = FALSE, mirror = "github")
install_from_swirl("Stasistical inferences", dev = FALSE, mirror = "github")
install_from_swirl("Statistical inferences", dev = FALSE, mirror = "github")
install_from_swirl("Statistical_inference", dev = FALSE, mirror = "github")
install_from_swirl("Statistical_Inference", dev = FALSE, mirror = "github")
swirl()
33/36
deck
52
4/52
0
12/52
2/51
dice_sqr
ex2_faie<-dice_fair * pdf
ex2_fair<-dice_fair * pdf
ex2_fair<-dice_fair * 2
ex2_fair<-sum(dice_fair * dice_sqr)
ex2_fair<- ex2_fair - 3.5*3.5
ex2_fair - 3.5^2
edh<-sum(dice_high * dice_sqr)  - 3.5^2
sum(dice_high * dice_sqr)  - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000),1000),1,mean))
sd(apply(matrix(rpois(10000,4),1000),1,mean))
sd(apply(matrix(rpois(10000),1000),1,mean))
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/2*sqrt(10)
1/2*sqrt(10))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,true),1000),1,mean))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
dice_sqr
dice
dice_sqr
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair - 3.5^2
sum(dice_high * dice_sqr) - 3.5^2
sum(dice_high * dice_sqr) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
.24
(5,3)*(.8)^3*(.2)^(5-3) + (5,4)*(.8)^4*(.2)^(5-4)  + (5,5)*(.8)^5*(.2)^(5-5)
.24*.4 + .32*.2
.24
.30
info()
.24*.4 + .32*.2 +.40
.24^3*.2^2
.24^3*.2^2 + .32^4+ .32^1
.24^3*.2^2 + .32^4*.2^1 + .4^5*.2^0
.24^3*.2^2 + .32^4*.2^1 + .4^5*.2^1
.24^3*.2^2 + .32^4*.2^1
??
?
.
3*.8^3*.2^2
3*.8^3*.2^2 + 4*.8^4*.2^1`
.
.,v
;
)
?
.
eexists()
,
C
w;lrokjoqkrowqr;qfr
0
exit()
()
/
\
swirl()
~
............
90888888888888
8
*
&^576
%$&#&Q&q
skip()
swirl()
library(swirl)
iinstall_from_swirl("Statistical_Inference", dev=FALSE, mirror= github )
install_from_swirl("Statistical_Inference", dev=FALSE, mirror= github )
install_from_swirl("Statistical_Inference", dev=FALSE, mirror= "github" )
swirl()
.8*3*.2*2 + .8*4*.2 + .8*5
3*.8^3*.2^2 + 4*.8^4*.2^1
3*.8^3*.2^2 + 4*.8^4*.2^1 + 5*.8^5*.2^0
.98242
.94208
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
qnorm(.10)
5
0
qnorm(.975,mean=3,sd=2)
1.96*2 +3
qnorm(1200,mean=1020,sd=50)
qnorm(1200,mean=1020,sd=50, lower.tail = FALSE)
pnorm(1200,mean=1020,sd=50, lower.tail = FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm((.75,lower.tail=FALSE)
qnorm(.75,mean=1020,sd=50, lower.tail = TRUE)
pnorm(qnorm(.53))
.53
ppois(3,2.5 * 4)
pbinom(5,1000,0.01)
ppois(5,1000*0.01)
coinPlot(10)
coinPlot(10000)
qnorm(95)
qnorm(.95)
.60+/- qnorm(.975)*sqrt(.60(1-.60)/100)
.60+c(-1,1)...
qnorm(.975)*sqrt(.60(1-.60)/100)
0.6+c(-1,1)qnorm(.975)sqrt(0.6*(1-0.6)/100)
0.6+c(-1,1)qnorm(.975)sqrt(0.6*(.4)/100)
.6 + c(-1,1)qnorm(.975)sqrt(.6*.4/100)
.6+c(-1,1)qnorm(.975)sqrt(.6*.4/100)
.6+c(-1,1) qnorm(.975)sqrt(.6*.4/100)
.6 + c(-1,1)qnorm(.975)sqrt(.6*.4/100)
.6 + qnorm(.975)sqrt(.6*.4/100)
.6 + qnorm(.975)*sqrt(.6*.4/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb<-5/94.32
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
swirl()
library (swirl)
install_from_swirl("Statistical-Inference", dev=FALSE, mirror = "github")
install_from_swirl("Statistical-Inference", dev=FALSE, mirror = "github")
install_from_swirl("StatisticalInference", dev=FALSE, mirror = "github")
library (swirl)
install_from_swirl("Statistical_Inference", dev=FALSE, mirror = "github")
install_from_swirl("Statistical_Inference", dev=FALSE, mirror = "github")
library(swirl)
install_from_swirl("Statistical_inference", dev= FALSE, mirror="github")
install_from_swirl("Statistical_Inference", dev=FALSE, mirror = "github")
library (swirl)
install_from_swirl("Statistical_Inference", dev=FALSE, mirror="github")
install_from_swirl("Statistical_Inference", dev=FALSE, mirror="bitbucket")
swirl()
myplot(2)
myplot(20)
myplot(2)
myplot2(2)
qt(.975, 2)
myplot2(20)
sleep
range(g1)
range(g2)
difference<-g1-g2
difference<-g2-g1
mean (difference)
s<-sd(difference)
95' +/- t_(10-1)*s/sqrt(10)
95' + t_(10-1)*s/sqrt(10)
95 + t_(10-1)*s/sqrt(10)
95 + qt( 10)
95 + qt( 10, 9)
mn + c(-1,1)*qt(.975, 9)*s/sqrt(10)
t.test
t.test(difference)$conf.int
sp<-(n_x-1)(S_x)^2+(n_y-1)(S_y)^2
sp<-(21)(3)^2+(21)(18.23)^2
sp<-
7
sp <- 7*15.34^2 + 20*18.23^2
ns<-5
ns<-7+20 -2
ns<- 8+21 -2
sp<-sqrt(sp/ns)
c(-1,1)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
var(g1,g2, 18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE$conf
)
t.test(g2,g1,paired=TRUE)$conf
num<-3
num <- (15.34^2/8 + 18.23^2/21)^2
den<-5
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf<-num/den
qt(.975,mydf)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
# Overview
#Investigate the exponential distribution in R and compare it with the Central Limit Theorem.
#The exponential distribution can be simulated in R with rexp(n, lambda) where lambda is the rate parameter.
#The mean of exponential distribution is 1/lambda and the standard deviation is also 1/lambda.
#Set lambda = 0.2 for all of the simulations.
#Investigate the distribution of averages of 40 exponentials.
#Note that you will need to do a thousand simulations.
#Illustrate via simulation and associated explanatory text the properties of the distribution of the mean of 40 exponentials. You should
#Show the sample mean and compare it to the theoretical mean of the distribution.
#Show how variable the sample is (via variance) and compare it to the theoretical variance of the distribution.
#Show that the distribution is approximately normal.
# Simulation
library(datasets)
?ToothGrowth
library (pdflatex)
pdflatex
\usepackage{pdfpages}
install_package(pdfpages)
install.packages("pdfpages")
library("swirl")
swirl()
6
dim(x)
dim(InsectSprays)
head (InsectSprays, 15)
sA
summary sA[ ,2]
summary InsectSprays[ ,2]
summary sA[ ,2]
summary sx[ ,2]
summary sB[ ,2]
summary M[ ,2]
summary InsectSprays[ ,2]
summary InsectSprays[, 2]
summary()
summary(InsectSprays [, 2])
sapply(InsectSprays)
sapply(InsectSprays, class)
fit<-lm(spray ~ count, data=InsectSprays)
fit<-lm(count ~ spray, data=InsectSprays)
summary (fit)$coef
est <-summary (fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count ~ spray -1, data=InsectSprays)
summary (nfit)$coef
spray2<- relevel(InsectSprays$spray, "c")
spray2<- relevel(InsectSprays$spray, aC)
spray2<- relevel(InsectSprays$spray, sC)
spray2<- relevel(InsectSprays$spray, "C")
fit2<-lm(count ~ spray2, data=InsectSprays)
summary (fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3] )/ 1.6011
dim(hunger)
948*13
948
names(hunger)
fit<-lm(numeric ~ Year, data=hunger)
fit<-lm(numeric ~ Year, data="hunger")
fit<-lm(Numeric ~ Year, data="hunger")
fit<-lm(Numeric ~ Year, data=hunger)
summary(fit)$coef
lmF<- lm([hunger$Sex="Female"] ~ Year, data=hunger)
lmF<- lm(hunger[hunger$Sex="Female"] ~ Year, data=hunger)
lmF<- lm(numeric[hunger$Sex="Female"] ~ Year, data=hunger)
lmF<- lm(numeric[hunger$Sex=="Female"] ~ Year, data=hunger)
lmF<- lm(Numeric[hunger$Sex=="Female"] ~ Year, data=hunger)
lmF<- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$SEx=="Female"], data=hunger)
lmF<- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], data=hunger)
lmM<- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], data=hunger)
lmBoth<-lm(Numeric ~ Year + Sex, data= hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, data=hunger)
summary (lmInter)
fit<- lm(y ~  x, out2)
plot(fit, which=1)
fitno<- lm(y ~  x, out2[-1,])
plot(fitno, which=1)
coef(fit) - coef(fitno)
head(dfbetaa(fit))
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues((fit))
)
head(hatvalues(fit))
sigma<-sd(resno)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd<-resno/sigma*sqrt(1-hatvalues(fit))
rstd<-resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd<-resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fitno, which=3)
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1])
)
head(rstudent(fit))
dy<- predict(fitno, out2) -predict(fit, out2)
dy/(2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
library ("swirl")
swirl()
rgp1()
rgp2()
head(swiss)
mdl<-lm(Swiss$Fertility ~ all, swiss)
mdl<-lm(Fertility ~ all, swiss)
mdl<-lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, swiss)
vif(mdl)
mdl2<-lm(Fertility ~ Agriculture +  Education + Catholic + Infant.Mortality, swiss)
vif(mdl2)
x1c<-simbias()
apply(x1c,1,mean)
fit1<-lm(Fertility ~ Agriculture, swiss)
fit3<-lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-(deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2.43, lower.tail=FALSE)
pf(n/d, 2,43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
view(ravenData)
View(ravenData)
mdl<- glm(ravenWinNum ~ ravenScore,family,ravenData)
mdl<- glm(ravenWinNum ~ ravenScore,ravenWinNum,ravenData)
mdl<- glm(ravenWinNum ~ ravenScore,binomial,ravenData)
lodds<- predict(mdl, data.frame(ravenScore=c(0, 3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl<-glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(.95, lambda)
mdl2<-qpois(lambda)
mdl2<-qpois()
mdl2<-qpois(log(visits+1))
mdl2<-qpois(.95,log(visits+1))
mdl2<-qpois(.95,log(30+1))
swirl()
mdl2(glm(lambda, qpoise, log(visits+1)))
mdl2<-(glm(lambda, qpoise, log(visits+1)))
mdl2<- qoise(.95, log(visits+1)))
mdl2<- qoise(.95, log(visits+1))
mdl2<- qpoise(.95, log(visits+1))
mdl2<
-
lambda
mdl2 <- glm(formula = simplystats ~ date, family = poisson,
| data = hits, offset = log(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson,
data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(MASS)
?shuttle
shuttle$use.binary <- as.integer(shuttle$use == "auto")
fit <- glm(use.binary ~ wind - 1, data = shuttle, family = binomial)
summary(fit)$coef
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
fit <- glm(use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
exp(coef(fit))
unname(exp(coef(fit))[1]/exp(coef(fit))[2])
fit1 <- glm(use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
fit2 <- glm(1 - use.binary ~ wind + magn - 1, data = shuttle, family = binomial)
coef(fit1)
coef(fit2)
fit <- glm(count ~ spray - 1, data = InsectSprays, family = poisson)
coef.exp <- exp(coef(fit))
unname(coef.exp[1] / coef.exp[2])
x <- seq(1, 1000, by = 1)
t <- log(x)
t2 <- log(10) + t
y <- ppois(x, 2)
fit1 <- glm(y ~ x + offset(t), family = poisson, data = InsectSprays)
fit2 <- glm(y ~ x + offset(t2), family = poisson, data = InsectSprays)
summary(fit1)$coef
summary(fit2)$coef
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
model <-lm(y ~ xMat - 1)
yhat <- predict(model)
plot(x, y, frame = FALSE, pch = 21,bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(model)
unname((yhat[11] - yhat[6]) / (5 - 0))
install.packages('bitops')
install.packages("bitops")
install.packages("Rcurl")
slidify('index.Rmd')
library (slidify)
slidify('index.Rmd')
setwd ("c"//users/asaran/R/developingdata/Alaka")
setwd ("c//users/asaran/R/developingdata/Alaka")
install.packages("bitops")
install.packages("bitops")
setwd ("c"//users/asaran/R/developingdata/Alaka")
install.packages("Rcurl")
install.packages('RCurl')
setwd ("c//users/asaran/R/developingdata/Alaka")
setwd ("c://users/asaran/R/developingdata/Alaka")
slidify('index.Rmd')
install.packages('slidify')
install.packages("slidify")
install.packages('render')
render("input.Rmd", "DevelopingData.pdf")
